Index: src/4_features/Registery_Login_User/Components/RegisteryUser.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react'\r\nimport { Controller, useForm } from 'react-hook-form'\r\n\r\nimport { useRegisterMutation } from '@/4_features/Registery_Login_User/api/registery_Login_Api'\r\nimport { useTranslation } from '@/6_shared/config/i18n/hook/useTranslation'\r\nimport Card from '@/6_shared/ui/Card'\r\nimport Button from '@/6_shared/ui/ui-button'\r\nimport { Spinner, useToast } from '@chakra-ui/react'\r\nimport Link from 'next/link'\r\n\r\nimport styles from '@/styles/LogIn.module.scss'\r\n\r\nexport const SignUpComponent: React.FC<any> = () => {\r\n  const {\r\n    control,\r\n    formState: { errors, isSubmitting },\r\n    handleSubmit,\r\n    reset,\r\n  } = useForm()\r\n  const [register] = useRegisterMutation()\r\n  const { t } = useTranslation()\r\n  const toast = useToast()\r\n\r\n  const onSubmit = async (data: any) => {\r\n    await register(data)\r\n      .unwrap()\r\n      .then(res => {\r\n        toast({\r\n          description: `${res?.message || 'успешно!'}`,\r\n          duration: 9000,\r\n          isClosable: true,\r\n          status: 'success',\r\n          title: 'Successful!',\r\n        })\r\n      })\r\n      .catch(error => {\r\n        toast({\r\n          description: `${error?.data?.errors?.username?.message}`,\r\n          duration: 9000,\r\n          isClosable: true,\r\n          status: 'error',\r\n          title: 'Ooops!',\r\n        })\r\n      })\r\n      .finally(() => {\r\n        reset({ email: '', password: '', username: '' })\r\n      })\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <form className={styles.loginForm} onSubmit={handleSubmit(onSubmit)}>\r\n        <div className={styles.tittle}>{t.signIn_SignUp.signUp}</div>\r\n        <div>\r\n          <Controller\r\n            control={control}\r\n            name={'username'}\r\n            render={({ field }) => (\r\n              <>\r\n                <input\r\n                  {...field}\r\n                  className={styles.inputField}\r\n                  placeholder={'Username'}\r\n                  type={'text'}\r\n                />\r\n                {errors.username && <p>{`${errors.username.message}`}</p>}\r\n              </>\r\n            )}\r\n            rules={{\r\n              minLength: { message: 'Username must be at least 6 characters', value: 6 },\r\n              pattern: {\r\n                message: 'Username must be one word without spaces',\r\n                value: /^[a-zA-Zа]+$/,\r\n              },\r\n              required: 'Username is required',\r\n            }}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Controller\r\n            control={control}\r\n            name={'email'}\r\n            render={({ field }) => (\r\n              <>\r\n                <input\r\n                  {...field}\r\n                  className={styles.inputField}\r\n                  placeholder={'Email'}\r\n                  type={'email'}\r\n                />\r\n                {errors.email && <p>{`${errors.email.message}`}</p>}\r\n              </>\r\n            )}\r\n            rules={{ required: 'Email is required' }}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Controller\r\n            control={control}\r\n            name={'password'}\r\n            render={({ field }) => (\r\n              <>\r\n                <input\r\n                  {...field}\r\n                  className={styles.inputField}\r\n                  placeholder={'Password'}\r\n                  type={'password'}\r\n                />\r\n                {errors.password && <p>{`${errors.password.message}`}</p>}\r\n              </>\r\n            )}\r\n            rules={{\r\n              minLength: { message: 'Password must be at least 6 characters', value: 6 },\r\n              pattern: {\r\n                message: 'Password must contain an uppercase letter and an underscore (_)',\r\n                value: /^(?=.*[A-Z])(?=.*_)/,\r\n              },\r\n              required: 'Password is required',\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n          {isSubmitting ? (\r\n            <div style={{ height: '2px', width: '2px' }}>\r\n              {isSubmitting && (\r\n                <Spinner\r\n                  color={'blue.500'}\r\n                  emptyColor={'gray.200'}\r\n                  size={'lg'}\r\n                  speed={'0.65s'}\r\n                  thickness={'4px'}\r\n                />\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <Button primary type={'submit'}>\r\n              {t.signIn_SignUp.signUp}\r\n            </Button>\r\n          )}\r\n        </div>\r\n        <div>{t.signIn_SignUp.haveAccount}</div>\r\n        <div>\r\n          <Link href={'/LogIn'}>\r\n            <Button outline type={'submit'}>\r\n              {t.signIn_SignUp.signIn}\r\n            </Button>\r\n          </Link>\r\n        </div>\r\n      </form>\r\n    </Card>\r\n  )\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/4_features/Registery_Login_User/Components/RegisteryUser.tsx b/src/4_features/Registery_Login_User/Components/RegisteryUser.tsx
--- a/src/4_features/Registery_Login_User/Components/RegisteryUser.tsx	(revision f35cbea2d043856476592404376748a3f0ce22e0)
+++ b/src/4_features/Registery_Login_User/Components/RegisteryUser.tsx	(date 1707822206080)
@@ -142,9 +142,7 @@
         <div>{t.signIn_SignUp.haveAccount}</div>
         <div>
           <Link href={'/LogIn'}>
-            <Button outline type={'submit'}>
-              {t.signIn_SignUp.signIn}
-            </Button>
+            <Button outline>{t.signIn_SignUp.signIn}</Button>
           </Link>
         </div>
       </form>
